#Create a Jenkins EC2 instance, Instance type as t2.medium, Key pair, subnet, storage as 8 GB, 
#at advanced paste this:
###Downloading and installing Jenkins
###Completing the previous steps enables you to download and install Jenkins on AWS. To download and install Jenkins:
###Ensure that your software packages are up to date on your instance by using the following command to perform a quick software update:
  sudo yum update –y
###Add the Jenkins repo using the following command:
  sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
###Import a key file from Jenkins-CI to enable installation from the package:
  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
###upgrade the Instance:
  sudo yum upgrade
###Install Java (Amazon Linux 2023):
  sudo dnf install java-17-amazon-corretto -y
###Install Jenkins:
  sudo yum install jenkins -y
###Enable the Jenkins service to start at boot:
  sudo systemctl enable jenkins
###Start Jenkins as a service:
  sudo systemctl start jenkins
###You can check the status of the Jenkins service using the command:
  sudo systemctl status Jenkins
###Install git
  sudo yum install git -y
###Initialize git
  sudo git init

#Do the inventory (IP addr, private IP addr, connection string)
#add 8080 port
#change the name by runnung:
  sudo nano /etchostname/
  reboot
#go to the browser, type the Jenkins IP addr along side with the 80808 port
#copy this path /var/lib....../initialAdminPassword
#Back to Jenkins machine, run
  cat var/lib/...../initialAdminPassword
#Copy the temporary key, go to the Jenkins site, paste and get started
Integrate Git with Jenkins, by cloning the repo using the https of the repo (any repo)
New Item, give a name as GitIntegration, Freestyle project, ok
Select git past the https of the repo
verify the branch and save
Click Build Now, console output
you can verify by copy the workplace path, go to the jenkins machine, and run:
  ls /var/lib...../gitintegration
Now, we need to integrate Maven
login as root
  sudo su -
  cd /opt
go to google, search for download Maven, copy the binary tar link
back to jenkins machine, run
  wget the_copied_maven_link
to veify that maven is installed
  ls -ll
#Maven is right there
Now, we need to unzip
  tar -xvzf apache-maven....
Rename the extracted Maven
  mv apache-maven.... maven
  ls
  cd maven
  cd bin
  ./mvn -v
mavnen is working but in oder to have it accessible from anywhere we need to set the environment variables
Before that we need to make sure that java is installed:
  find / -name java
copy /usr/lib/......x86_64 and added to the inventory
## Location for Java is  /usr/lib/jvm/java-17-amazon-corretto.x86_64
## Location for Maven is /opt/maven
  cd ~
  ll -a
## Add the below in .bash_profile
  nano .bash_profile
  M2_HOME=/opt/maven
  JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto.x86_64
# User specific environment and startup programs
  export PATH=$PATH:$HOME/bin:$JAVA_HOME:$M2_HOME/bin
#Save
  $PATH
#The changes were not saved yet
#exit so the changes will take effect
  exit
  exit
#Relogin to the server
#use root
  sudo su -
  $PATH
#The chnages are now reflecting
#So, now maven can be accessible from anywhere.
#Now, we need to integrate Jenkins with Maven
#Go To Jenkins site, Manage Jenkins, Plugins, type maven
#Selet Maven Integration, and the install
#Bakc to Manage Jenkins, Tools, click on Add JDK, give name as java, copy paste the java path "/usr/lib/jvm/java-17-amazon-corretto.x86_64" under JAVA_HOME
#Scroll down to Add Maven, click on it, give name as Maven, uncheck the Install automatically, cop paste "/opt/maven" in MAVEN_HOME
#Save
#Go to github, find the helloword repo, copy the https,
#Go to Jenkins Dashboard, new Item, give name as "MavenIntegration, select Maven project, click Ok
#Scroll down to Git, select it, paste the https url of the helloworld repo, verify the branch
#Scroll down to Goals and options type "clean install" means completely removing an existing system, software, or application and reinstalling it from scratch. 
#Save
#Clcik on Build Now, console outputs, copy the workspace /var/lib/...MavenIntegration
Back to Jenkins machine
  ls /var/lib/...MavenIntegration
  ls /var/lib/...MavenIntegration/webapp/target/
#webapp.war is there
#Now, we need to launch another ec2 instance for Docker
Go to aws console, name as Docker, instance type as te.medium, key pair, storage as 20 GB
Do the inventory
lanch a new machine for Docker
  sudo su -
rename the machine
  nano /etc/hostname
  reboot
go back to the docker instance and add ports 8080 for Docker and 8081 - 8090 for the containers
Now, we need to install Docker, go to the docker machine
  yum install docker -y
check it
  systemctl status docker
Start the service
  systemctl start docker
Enable the service
  systemctl enable docker
Now, go to google, search for hub.docker.com
in the search field, search for tomcat, copy the command 
  docker pull tomcat
It will take the version as latest by default (if you didn't specify it)
these 2 commands are same
  docker pull tomcat 
  docker pull tomcat:latest
we can verify that the tomcat image is downloaded
  docker images
returns the tomcat image with tag as latest, and ID
so far, we only downloaded an image,
To create a container we need to run this:
  docker run --name conatiner1 -p 8081:8080 tomcat:latest
#Container1: is the name
#-p 8081:8080 is the port
#tomcat:latest is the image with its tag
#-p for ports
The conatiner is now running
Copy the docker ip addr, paste it to the browser with port 8081
You will get 404 not found but the response came from Apache Tomcat with version. which means the tomcat server is up and running 
to see if the container was created, run
  docker ps -a
The container1 will be returned
So, what we did so far was:
to check the downloaded image, we run
  docker images
to check the container, we run
  docker ps -a
to run the docker server we run:
  docker run --name conatiner1 -p 8081:8080 tomcat:latest
to run a stopped container, we run:
  docker start container1
to verify, run:
  docker ps -a
the active container will be returned
  docker exec -it container1 /bin/bash
This above command opens an interactive Bash shell inside the running Docker container named container1. It lets you execute commands as if you were inside a Linux terminal within that container.
#docker exec → Runs a command inside an already running Docker container.
#-i (interactive) → Keeps the session open for input.
#-t (tty) → Allocates a pseudo-terminal (TTY), making it behave like an interactive shell.
#container1 → The name (or container ID) of the running container where the command should be executed.
#/bin/bash → Starts a Bash shell inside the container, allowing interactive command execution.
if I do pwd
  pwd
I'm in the home folder
To check the contents:
  ls
#Within the contents, I see a folder caller webapps.dist. Its purposes are:
##It serves as a backup of the default web applications that come with Tomcat (like ROOT, docs, examples, and manager).
#When Tomcat starts, it copies web applications from webapps.dist to the webapps/ directory if webapps/ is empty.
#This ensures that the default web applications are available if webapps/ is deleted or cleared.
#How it works:
If you remove everything from /usr/local/tomcat/webapps/ and restart the container, Tomcat will restore default applications from webapps.dist/.
If you manually deploy your .war files in /usr/local/tomcat/webapps/, Tomcat will use those instead of the defaults.

#Now we need to rename the webapps.dist
#Renaming webapps.dist is mainly done to prevent Tomcat from restoring default applications, ensuring a clean deployment for your web apps.
  mv webapps webapps1
  mv webapps.dist webapps
#To verify
  ls
#Now, if you refresh the screen wher you had docker IPaddr with port 8081, you will see the apache tomcat page with a congratulations message.
#to come out form the container, we need to exit
  exit
so, now, we out of the container and are on the docker server
To delete the created container, we run:
  docker rm -f container1
to veirfy
  docker ps -a
No container was returned
to delete an image
  docker rmi copy_paste_the_image_id
to verify:
  docker images
No image would be returned
Let's download an image one more time
  docker pull tomcat:latest
to create a container
  docker run -d --name container2 -p 8082:8080 tomcat:latest
#-d means in a detached mode, meaning you can leave the station and still your container is running
To verify, copy paste the docker IPaddr with port 8082, you will see that tomcat server is up and running
In order to rename the webapps.dist, we need to login to the container
  docker exec -it container2 /bin/bash
  ls
  mv webapps webapps2
  mv webapps.dist webapps
Refresh the page of the tomcat server that has Ip addr with port 8082
it should show the congratulations message
Exit from the conrtainer2
  exit
run
  docker ps -a
Now, we need to create docker user (dockeradmin) in the docker host server and add it to the docker group
Go to docker server (machine), and run
  useradd dockeradmin
  passwd dockeradmin
add this user to the docker group
  usermod -aG docker dockeradmin
to verify
  id dockeradmin
You will see that dockeradmin is part of the docker group
We also, need to enable password authentication
  ls /etc/ssh/
We need to edit in this file ssh_config
  nano /etc/ssh/sshd_config
Locate the line where it says "PasswordAutenthication no", chnage the "no" to "yes", then save it
This change is needed to allow the dockeradmin to login to the docker server to set the ssh authentication
Start the sshd service
  systemctl start sshd
#All of this is needed to integrate docker with Jenkins
#Go To Jenkins, Manage Jenkins, Plugins, type "Publish Over Ssh", install
#Go to Manage Jenkins again, System, Scroll down to the SSH Server, click Add
#Give it a name as "Docker", at Hostname, pu the docker private IP addr, at username give "dockeradmin",
#Scoll down to Advanced, check where it says "Use password authentication, or use a different key"
#At the Passphrase/Password, type the dockeradmin password that we created previously
#Now to test this configuration, scroll down, at the battom right corner, click on "Test Configuration"
#It should show "Success", click on Save
#Click on New Item, give it a name as "DockerIntegration", select Maven project, click OK
#Over to Git, copy paste the HTTPS URL of the hellowWorld Repo, verify the branch, scroll dwn to Goals and options "clean install package"
###clean: This removes the target directory (previous build artifacts) to ensure a fresh build.
###install: This compiles the code, runs tests, and installs the generated JAR/WAR file into the local Maven repository (~/.m2/repository).
###package: This explicitly ensures that the application is packaged into a deployable format (JAR, WAR, etc.).
###While install does implicitly include package, explicitly specifying package ensures that the necessary artifacts are created before the installation.
###Some Jenkins pipelines might use Docker to build and package the application, but not install dependencies into the local repository. 
###In such cases, package guarantees the output artifact exists before Docker picks it up.
At Add post-build action, select "Send build artifacts over SSH", 
At Transfer Set section, in the Source files, type "webapp/target/*.war"
###Specifies which files to transfer.
###Matches all .war files in the webapp/target/ directory.
###Typically used in Java-based web applications (e.g., built with Maven or Gradle).
At Remove prefix, type "webapp/target"
What does this mean?
###Ensures that the .war files are uploaded without retaining the webapp/target/ directory structure.
###If not removed, the files might be stored in a nested directory on the remote server (docker server) instead of directly in the intended location.
#At Remote directory type "." this means "Use the default directory on the remote server."
click Save
Run the Build by clicking on Build now, should show no errors.
#Go to Console output, will show success at the end
to verify the docket integration with jenkins, go to Jenkins machnine
  ls /var/lib/jenkins/.....DockerIntegration
  ls /var/lib/jenkins/.....DockerIntegration/webapp
  ls /var/lib/jenkins/.....DockerIntegration/webapp/target/
you will see the artifact (webapp.war) that we downloaded onto our jenkins
Now, let's logon to the docker server,
  pwd
  ls
  ls /home/dockeradmin/
you will see that webapp.war is there. This means that the /home/dockeradmin/ directory contains that file
Next step is to deploy this .war to a container.
Login as dockeradmin
  su dockeradmin
  whoami
  pwd
  cd ~
Now we need to edit the Dockerfile by adding these commands into the Dockerfile
  FROM tomcat:latest
  MAINTAINER Jamal Tighilt
  COPY ./webapp.war /usr/local/tomcat/webapps
  nano Dockerfile
Next, is to create a docker image
  docker images
the image is created.
Let's create an image out of the artifacts that we have (webapp.war)
  docker build -t devopsdockerimage1 .
  ls
  docker images
You will see that now we have 2 images
Now, we need to create a container
  docker run -d --name devopscontainer1 -p 8083:8080 devopsdockerimage1:latest
If we go to the browser, paste the docker IP addr with the port 8083, it will show the 404 error, but will see the response was from Apache Tomcat with version
Now, go back to Jenkins site, select DockerIntegration, Configure, Scoll down to Post Build Actions, locate the field named "Exec command",
type "cd /home/dockeradmin; docker build -t devopsdockerimage1 .; docker run -d --name devopscontainer1 -p 8084:8080 devopsdockerimage1;"
  cd /home/dockeradmin; docker build -t devopsdockerimage1 .; docker run -d --name devopscontainer1 -p 8084:8080 devopsdockerimage1;
###cd /home/dockeradmin; Changes the current directory to /home/dockeradmin, where the Dockerfile is likely located.
###docker build -t devopsdockerimage1 .; Builds a Docker image from the Dockerfile in the current directory (.).
###-t devopsdockerimage1 tags the image with the name devopsdockerimage1.
###docker run -d --name devcon5 -p 8084:8080 devopsdockerimage1; 
  ###Runs a container in the background (-d for detached mode).
  ###Assigns the container the name devcon5 (--name devcon5).
  ###Maps port 8084 on the host to 8080 inside the container (-p 8084:8080).
  ###Runs the container from the devopsdockerimage1 image.
Before running this, go back to the docker machine, then remove the webapp.war file (because the war file will be created through the above commad in Jenkins
  rm -f webapp.war
  ls
the webapp.war is now deleted
Now go back to Jenkins site, click on Build now, the build is created successfully
To verify, go to Docker machine, run this
  docker ps -a
you will see that the container devopscontainer1 was creted and running,
We can also verify this through the IPaddr and the port 8084, slash artifact (webapp) like this: ipaddresse:8084/webapp/
The piit website is deployed autoamtically
#Let's the whole thing again automatically
remove the .war file
  rm -f webapp.war
remove the container devopscontainer1
  docker rm -f  devopscontainer1
Go to Jenkins site, click DockerIntegration, then click on Configure, scroll down to Build Triggers, then select Poll SCM
In the schedule section, type * * * * * (this means that it will ru automatically every minute), click Save
Go to Github, HelloWorld Repo, webapp, src, index.jsp, update the h1 from Falcon to PIIT, commit
Go back to Jenkins, a build will be triggered automatically
in the Browser, the PIIT websit is delpoyed with the updated h1 (PIIT instead of Falcon)




