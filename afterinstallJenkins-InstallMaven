ho $PATH
connect to git
very the workspace by running this command:
  ls /var/lib/jenkins/workspace/
  ls /var/lib/jenkins/workspace/githubInt
go to Maven apache.org
copy the maven Binary link
run command:
  cd /opt
  wget paste_the copied_maven_URL
  ls
  tar -xvzf apache-maven-3.9.9-bin.tar.gz
  ls
  mv apache-maven-3.9.9 maven
  cd maven
  ls
  cd bin
  ls
  ./mvn -v (./ becuase maven is only available in the current session) 
  pwd
  cd /
  cd ~
 #so we need to configure the Env varibales
run command to locate java
  find / -name java
location: /usr/lib/jvm/java-17-amazon-corretto.x86_64/ 
set other Env variables in Notepad:
M2_HOME=/opt/maven
M2=/opt/maven/bin
JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto.x86_64/
PATH=$PATH:$HOME/bin:$JAVA_HOME:$M2_HOME:$M2
 ls -al (Look for .bash_profile)
  nano .bash_profile
#copy the Env varibale. It will look like this
    # .bash_profile

    # Get the aliases and functions
    if [ -f ~/.bashrc ]; then
            . ~/.bashrc
    fi

    M2_HOME=/opt/maven
    M2=/opt/maven/bin
    JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto.x86_64/

    # User specific environment and startup programs

    PATH=$PATH:$HOME/bin:$JAVA_HOME:$M2_HOME:$M2
    export PATH
run commands:
  echo $PATH
  exit
  exit  (to have the added Env variables take effect)
re-login again as root by running the echo command
  echo $PATH
Go back to Jenkins, click on Manage Jenkins, Tools, look for Add JDK button, give a name (java), then copy the location of Java that was found we ran find command
/usr/lib/jvm/java-17-amazon-corretto.x86_64
then look for Add Maven button, give a name (Maven), uncheck the Install automatically
under MAVEN_HOME put "/opt/maven"
click on apply and save
Click on Plugins, Available Plugins
search for Maven Integration, click install
go back to the Dashboard, click New Item
give a name (MavenInt), select Maven Project
select Git, git the java repo URL (HelloWorld)
Scoll down and look for option called "Goals and options" put "clean install"
Click on Apply, Save
click on Build Now
go the Jenkins Instance:
  cd /opt
verify the workspace, copy the location (/var/lib/jenkins/workspace/MavenInt/)
run command:
  ls /var/lib/jenkins/workspace/MavenInt/
  ls /var/lib/jenkins/workspace/MavenInt/webapp/
  ls /var/lib/jenkins/workspace/MavenInt/webapp/target/
you will see the webapp.war file (the verif is completed and Maven build is complete)

Create new Instance and name it as tomcat, select Amazon machine Image as "Amazon Linux 2 AMI"
Do the Inventory
add the port 8080 sa new rule
switch to root user
  sudo su -
  cd /opt
rename the server as tomcat, then reboot it
go to google search for "download tomcat", under download tab click on tomcat 10.1
right click and copy link of tar.gz
go to the instance, and run the command:
  wget paste_tomcat_tar.gz_link
  ls
  tar -xvzf apache-tomcat-10.1.34.tar.gz
  ls
rename it by running
  mv apache-tomcat-10.1.34 tomcat
go to the inside of tomcat
  cd tomcat
  cd bin
  ls
look for file named .startup.sh
run this command to see if java is installed
  ./startup.sh
if not installed, run this
  yum install java -y
run again
  ./startup.sh
verify tomcat if it is up and running, copy the public ip addr with port 8080 go to google browser
if you click on Server Status in tomcat page, you will see all the errors (access denied)
now, we need to change the configuration for tomcat, need to check 2 files Hostmanager and Manager
before that, go back to tomcat folder
  cd ..
  pwd
search to the file that we need to modify
run this:
  find -name context.xml
locate these
    ./webapps/host-manager/META-INF/context.xml
    ./webapps/manager/META-INF/context.xml
comment out this line by adding "<!--   -->" in both files Host-manager and Manager:
  <!--<Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /> -->
  run nano ./webapps/host-manager/META-INF/context.xml
  run nano ./webapps/manager/META-INF/context.xml
then run this command to edit tomcat users.xml
run these commands:
  ls /opt/tomcat/
  ls /opt/tomcat/conf/
  nano /opt/tomcat/conf/tomcat users.xml
copy the blow xml and add it the end of the file before the the line </tomcat-users>
<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<role rolename="manager-jmx"/>
<role rolename="manager-status"/>
<user username="admin" password="admin" roles="manager-gui, manager-script,manager-jmx,manager-status"/>
<user username="deployer" password="deployer" roles="manager-script"/>
<user username="tomcat" password="s3cret" roles="manager-gui"/>

go the browser copy the tomcat IP addr with the port (http://54.82.5.220:8080/), click on the Server Status
provide credential (username: tomcat, password: s3cret), you should be able to login into tomcat.
Go back to Jenkins, click on Manage Jenkins, we need to add another plugins called "Deploy to container", then install it
Then go back to Manage Jenkins, click on Credentials, then System, then Global credentials, then Add Credentials
give username as "deployer", password as "deployer",ID as "tomcat_deployer", and Description as "tomcat_deployer", click Create
Go back to Jenkins dashboard, Click on MavenInt, then click on Configuration, 
Scroll down to git, then copy the git URL, then go back to the Dashboard again, Click on New Item
Give a name as mavencicd, select Maven project, then click on OK, scroll down to git, select it, then paste the git URL
Scroll down to Goals and options, put "clean install"
Scroll down to Add post-build action, then select Deploy war/ear to a container,
at WAR/EAR Files field put "**/*.war"
in the same page, go to Add Container, select the latest version of tomcat (Tomcat 9.x Remote)
At Credentials field select deployer/*****(tomcat_deployer), then copy paste the tomcat IP addr with port (
http://35.172.219.238:8080/)
Click on Apply, and Save
Click on Build Now button
Go back to the browser that has tomcat Ip addr and port and add to it "webapp" like this: http://35.172.219.238:8080/webapp/
you should see the page of the HelloWorld html (in our case PIIT user Registration page)
Now, go back to the pipeline project (mavencicd) in Jenkins, click on Configuration, 
then scroll down to Triggers section, then select "Poll SCM", then type "* * * * *" in the schedule (this means that will run every minute)
click on Apply and Save

Create a 3rd EC2 Instance, name it as Developer
login as root
go to tmp by running
  cd /tmp
create a folder and name it as repos
  mkdir repos
  cd repos
  ls
install git
  yum install git -y
go to the github, then copy the SSH link of the repo, then run this command in Developer
generate an SSH key by running 

git clone copy_SSH_link























  






  
